import 'dart:io';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';

class PDFService {
  static Future<String?> generateSingleResultPDF({
    required String imagePath,
    required Map<String, dynamic> apiResponse,
  }) async {
    try {
      final pdf = pw.Document();

      // Load image for PDF
      final imageFile = File(imagePath);
      final imageBytes = await imageFile.readAsBytes();
      final image = pw.MemoryImage(imageBytes);

      // Extract data from API response
      final overallSeverity =
          apiResponse['overall_severity']?.toString() ?? 'Unknown';
      final totalCost =
          apiResponse['total_cost']?.toString() ?? 'Not available';
      final damages = apiResponse['damages'] ?? apiResponse['prediction'] ?? [];

      // Format cost
      String formattedCost = 'Not available';
      if (totalCost != 'Not available') {
        try {
          final cost = double.parse(totalCost);
          formattedCost = '₱${cost.toStringAsFixed(2)}';
        } catch (e) {
          formattedCost = '₱$totalCost';
        }
      }

      pdf.addPage(
        pw.MultiPage(
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(32),
          build: (pw.Context context) {
            return [
              // Header
              pw.Header(
                level: 0,
                child: pw.Text(
                  'Vehicle Damage Assessment Report',
                  style: pw.TextStyle(
                    fontSize: 24,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
              ),

              pw.SizedBox(height: 20),

              // Report details
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Text(
                    'Report Date: ${DateTime.now().toString().split(' ')[0]}',
                    style: const pw.TextStyle(fontSize: 12),
                  ),
                  pw.Text(
                    'Generated by InsureVis',
                    style: const pw.TextStyle(fontSize: 12),
                  ),
                ],
              ),

              pw.SizedBox(height: 30),

              // Image section
              pw.Container(
                alignment: pw.Alignment.center,
                child: pw.Column(
                  children: [
                    pw.Text(
                      'Analyzed Image',
                      style: pw.TextStyle(
                        fontSize: 16,
                        fontWeight: pw.FontWeight.bold,
                      ),
                    ),
                    pw.SizedBox(height: 10),
                    pw.Container(
                      height: 300,
                      child: pw.Image(image, fit: pw.BoxFit.contain),
                    ),
                  ],
                ),
              ),

              pw.SizedBox(height: 30),

              // Assessment summary
              pw.Container(
                padding: const pw.EdgeInsets.all(16),
                decoration: pw.BoxDecoration(
                  border: pw.Border.all(color: PdfColors.grey300),
                  borderRadius: const pw.BorderRadius.all(
                    pw.Radius.circular(8),
                  ),
                ),
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text(
                      'Assessment Summary',
                      style: pw.TextStyle(
                        fontSize: 18,
                        fontWeight: pw.FontWeight.bold,
                      ),
                    ),
                    pw.SizedBox(height: 15),

                    pw.Row(
                      children: [
                        pw.Expanded(
                          child: pw.Column(
                            crossAxisAlignment: pw.CrossAxisAlignment.start,
                            children: [
                              pw.Text(
                                'Overall Severity',
                                style: pw.TextStyle(
                                  fontWeight: pw.FontWeight.bold,
                                  fontSize: 14,
                                ),
                              ),
                              pw.SizedBox(height: 5),
                              pw.Text(
                                _capitalizeFirst(overallSeverity),
                                style: const pw.TextStyle(fontSize: 12),
                              ),
                            ],
                          ),
                        ),
                        pw.Expanded(
                          child: pw.Column(
                            crossAxisAlignment: pw.CrossAxisAlignment.start,
                            children: [
                              pw.Text(
                                'Estimated Cost',
                                style: pw.TextStyle(
                                  fontWeight: pw.FontWeight.bold,
                                  fontSize: 14,
                                ),
                              ),
                              pw.SizedBox(height: 5),
                              pw.Text(
                                formattedCost,
                                style: const pw.TextStyle(fontSize: 12),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),

              pw.SizedBox(height: 20),

              // Damages section
              if (damages.isNotEmpty) ...[
                pw.Text(
                  'Detected Damages',
                  style: pw.TextStyle(
                    fontSize: 18,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
                pw.SizedBox(height: 10),

                ...damages.map((damage) {
                  String damageType = 'Unknown';
                  String severity = '';

                  if (damage is Map<String, dynamic>) {
                    damageType =
                        damage['type']?.toString() ??
                        damage['damage_type']?.toString() ??
                        'Unknown';
                    severity = damage['severity']?.toString() ?? '';
                  } else if (damage is String) {
                    damageType = damage;
                  }

                  return pw.Container(
                    margin: const pw.EdgeInsets.only(bottom: 8),
                    padding: const pw.EdgeInsets.all(12),
                    decoration: pw.BoxDecoration(
                      color: PdfColors.grey100,
                      borderRadius: const pw.BorderRadius.all(
                        pw.Radius.circular(6),
                      ),
                    ),
                    child: pw.Row(
                      children: [
                        pw.Text('• ', style: const pw.TextStyle(fontSize: 16)),
                        pw.Expanded(
                          child: pw.Text(
                            _capitalizeFirst(damageType),
                            style: const pw.TextStyle(fontSize: 12),
                          ),
                        ),
                        if (severity.isNotEmpty)
                          pw.Container(
                            padding: const pw.EdgeInsets.symmetric(
                              horizontal: 8,
                              vertical: 2,
                            ),
                            decoration: pw.BoxDecoration(
                              color: PdfColors.grey300,
                              borderRadius: const pw.BorderRadius.all(
                                pw.Radius.circular(4),
                              ),
                            ),
                            child: pw.Text(
                              _capitalizeFirst(severity),
                              style: const pw.TextStyle(fontSize: 10),
                            ),
                          ),
                      ],
                    ),
                  );
                }).toList(),
              ],

              pw.SizedBox(height: 30),

              // Footer
              pw.Container(
                alignment: pw.Alignment.center,
                child: pw.Text(
                  'This report was generated automatically by InsureVis AI system.',
                  style: const pw.TextStyle(
                    fontSize: 10,
                    color: PdfColors.grey600,
                  ),
                ),
              ),
            ];
          },
        ),
      );

      return await _savePDF(
        pdf,
        'damage_assessment_${DateTime.now().millisecondsSinceEpoch}.pdf',
      );
    } catch (e) {
      print('Error generating PDF: $e');
      return null;
    }
  }

  static Future<String?> generateMultipleResultsPDF({
    required List<String> imagePaths,
    required Map<String, Map<String, dynamic>> apiResponses,
  }) async {
    try {
      final pdf = pw.Document();

      pdf.addPage(
        pw.MultiPage(
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(32),
          build: (pw.Context context) {
            return [
              // Header
              pw.Header(
                level: 0,
                child: pw.Text(
                  'Multi-Image Damage Assessment Report',
                  style: pw.TextStyle(
                    fontSize: 24,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
              ),

              pw.SizedBox(height: 20),

              // Report details
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Text(
                    'Report Date: ${DateTime.now().toString().split(' ')[0]}',
                    style: const pw.TextStyle(fontSize: 12),
                  ),
                  pw.Text(
                    'Generated by InsureVis',
                    style: const pw.TextStyle(fontSize: 12),
                  ),
                ],
              ),

              pw.SizedBox(height: 30),

              // Summary section
              pw.Container(
                padding: const pw.EdgeInsets.all(16),
                decoration: pw.BoxDecoration(
                  border: pw.Border.all(color: PdfColors.grey300),
                  borderRadius: const pw.BorderRadius.all(
                    pw.Radius.circular(8),
                  ),
                ),
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text(
                      'Assessment Overview',
                      style: pw.TextStyle(
                        fontSize: 18,
                        fontWeight: pw.FontWeight.bold,
                      ),
                    ),
                    pw.SizedBox(height: 10),
                    pw.Text(
                      'Total Images Analyzed: ${imagePaths.length}',
                      style: const pw.TextStyle(fontSize: 14),
                    ),
                    pw.Text(
                      'Successful Analyses: ${apiResponses.length}',
                      style: const pw.TextStyle(fontSize: 14),
                    ),
                  ],
                ),
              ),

              pw.SizedBox(height: 30),

              // Individual results
              ...imagePaths.asMap().entries.map((entry) {
                final index = entry.key;
                final imagePath = entry.value;
                final apiResponse = apiResponses[imagePath];

                if (apiResponse == null) {
                  return pw.Container(
                    margin: const pw.EdgeInsets.only(bottom: 20),
                    padding: const pw.EdgeInsets.all(16),
                    decoration: pw.BoxDecoration(
                      border: pw.Border.all(color: PdfColors.red300),
                      borderRadius: const pw.BorderRadius.all(
                        pw.Radius.circular(8),
                      ),
                    ),
                    child: pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text(
                          'Image ${index + 1} - Analysis Failed',
                          style: pw.TextStyle(
                            fontSize: 16,
                            fontWeight: pw.FontWeight.bold,
                            color: PdfColors.red700,
                          ),
                        ),
                        pw.SizedBox(height: 5),
                        pw.Text(
                          'This image could not be processed.',
                          style: const pw.TextStyle(fontSize: 12),
                        ),
                      ],
                    ),
                  );
                }

                return _buildIndividualResult(
                  index + 1,
                  imagePath,
                  apiResponse,
                );
              }).toList(),

              pw.SizedBox(height: 30),

              // Footer
              pw.Container(
                alignment: pw.Alignment.center,
                child: pw.Text(
                  'This report was generated automatically by InsureVis AI system.',
                  style: const pw.TextStyle(
                    fontSize: 10,
                    color: PdfColors.grey600,
                  ),
                ),
              ),
            ];
          },
        ),
      );

      return await _savePDF(
        pdf,
        'multi_damage_assessment_${DateTime.now().millisecondsSinceEpoch}.pdf',
      );
    } catch (e) {
      print('Error generating multi-results PDF: $e');
      return null;
    }
  }

  static pw.Widget _buildIndividualResult(
    int imageNumber,
    String imagePath,
    Map<String, dynamic> apiResponse,
  ) {
    final overallSeverity =
        apiResponse['overall_severity']?.toString() ?? 'Unknown';
    final totalCost = apiResponse['total_cost']?.toString() ?? 'Not available';
    final damages = apiResponse['damages'] ?? apiResponse['prediction'] ?? [];

    String formattedCost = 'Not available';
    if (totalCost != 'Not available') {
      try {
        final cost = double.parse(totalCost);
        formattedCost = '₱${cost.toStringAsFixed(2)}';
      } catch (e) {
        formattedCost = '₱$totalCost';
      }
    }

    return pw.Container(
      margin: const pw.EdgeInsets.only(bottom: 30),
      padding: const pw.EdgeInsets.all(16),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey300),
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Image $imageNumber Analysis',
            style: pw.TextStyle(fontSize: 16, fontWeight: pw.FontWeight.bold),
          ),

          pw.SizedBox(height: 15),

          // Summary row
          pw.Row(
            children: [
              pw.Expanded(
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text(
                      'Severity: ${_capitalizeFirst(overallSeverity)}',
                      style: const pw.TextStyle(fontSize: 12),
                    ),
                    pw.SizedBox(height: 5),
                    pw.Text(
                      'Cost: $formattedCost',
                      style: const pw.TextStyle(fontSize: 12),
                    ),
                  ],
                ),
              ),
              pw.Text(
                'Damages: ${damages.length}',
                style: const pw.TextStyle(fontSize: 12),
              ),
            ],
          ),

          if (damages.isNotEmpty) ...[
            pw.SizedBox(height: 10),
            pw.Text(
              'Detected Damages:',
              style: pw.TextStyle(fontSize: 12, fontWeight: pw.FontWeight.bold),
            ),
            pw.SizedBox(height: 5),
            ...damages.take(3).map((damage) {
              String damageType = 'Unknown';
              if (damage is Map<String, dynamic>) {
                damageType =
                    damage['type']?.toString() ??
                    damage['damage_type']?.toString() ??
                    'Unknown';
              } else if (damage is String) {
                damageType = damage;
              }

              return pw.Text(
                '• ${_capitalizeFirst(damageType)}',
                style: const pw.TextStyle(fontSize: 10),
              );
            }).toList(),
            if (damages.length > 3)
              pw.Text(
                '• + ${damages.length - 3} more damages',
                style: pw.TextStyle(
                  fontSize: 10,
                  fontStyle: pw.FontStyle.italic,
                ),
              ),
          ],
        ],
      ),
    );
  }

  static Future<String?> _savePDF(pw.Document pdf, String fileName) async {
    try {
      // Request storage permission
      final status = await Permission.storage.request();
      if (!status.isGranted) {
        print('Storage permission denied');
        return null;
      }

      // Get the downloads directory
      Directory? directory;
      if (Platform.isAndroid) {
        directory = Directory('/storage/emulated/0/Download');
        if (!await directory.exists()) {
          directory = await getExternalStorageDirectory();
        }
      } else {
        directory = await getApplicationDocumentsDirectory();
      }

      if (directory == null) {
        print('Could not get directory');
        return null;
      }

      final file = File('${directory.path}/$fileName');
      await file.writeAsBytes(await pdf.save());

      print('PDF saved to: ${file.path}');
      return file.path;
    } catch (e) {
      print('Error saving PDF: $e');
      return null;
    }
  }

  static String _capitalizeFirst(String text) {
    if (text.isEmpty) return text;
    return text[0].toUpperCase() + text.substring(1).toLowerCase();
  }
}
