import 'dart:io';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:permission_handler/permission_handler.dart';
import 'package:path_provider/path_provider.dart';
import '../services/local_storage_service.dart';

class PDFService {
  static Future<String?> generateSingleResultPDF({
    required String imagePath,
    required Map<String, dynamic> apiResponse,
  }) async {
    try {
      final pdf = pw.Document();

      // Load image for PDF with better error handling
      pw.ImageProvider? image;
      try {
        final imageFile = File(imagePath);
        if (await imageFile.exists()) {
          final imageBytes = await imageFile.readAsBytes();
          image = pw.MemoryImage(imageBytes);
        } else {
          print('Warning: Image file does not exist at path: $imagePath');
          // Continue without image - PDF will still be generated
        }
      } catch (e) {
        print('Warning: Failed to load image for PDF: $e');
        // Continue without image - PDF will still be generated
      }

      // Extract data from API response
      final overallSeverity =
          apiResponse['overall_severity']?.toString() ?? 'Unknown';
      final totalCost =
          apiResponse['total_cost']?.toString() ?? 'Not available';
      final damages = apiResponse['damages'] ?? apiResponse['prediction'] ?? [];

      // Format cost
      String formattedCost = 'Not available';
      if (totalCost != 'Not available') {
        try {
          final cost = double.parse(totalCost);
          formattedCost =
              'PHP ${cost.toStringAsFixed(2)}'; // Use PHP instead of â‚± symbol
        } catch (e) {
          formattedCost = 'PHP $totalCost';
        }
      }

      pdf.addPage(
        pw.MultiPage(
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(32),
          build: (pw.Context context) {
            return [
              // Header
              pw.Header(
                level: 0,
                child: pw.Text(
                  'Vehicle Damage Assessment Report',
                  style: pw.TextStyle(
                    fontSize: 24,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
              ),

              pw.SizedBox(height: 20),

              // Report details
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Text(
                    'Report Date: ${DateTime.now().toString().split(' ')[0]}',
                    style: const pw.TextStyle(fontSize: 12),
                  ),
                  pw.Text(
                    'Generated by InsureVis',
                    style: const pw.TextStyle(fontSize: 12),
                  ),
                ],
              ),

              pw.SizedBox(height: 30),

              // Image section
              if (image != null) ...[
                pw.Container(
                  alignment: pw.Alignment.center,
                  child: pw.Column(
                    children: [
                      pw.Text(
                        'Analyzed Image',
                        style: pw.TextStyle(
                          fontSize: 16,
                          fontWeight: pw.FontWeight.bold,
                        ),
                      ),
                      pw.SizedBox(height: 10),
                      pw.Container(
                        height: 300,
                        child: pw.Image(image, fit: pw.BoxFit.contain),
                      ),
                    ],
                  ),
                ),
                pw.SizedBox(height: 30),
              ] else ...[
                pw.Container(
                  alignment: pw.Alignment.center,
                  padding: const pw.EdgeInsets.all(20),
                  decoration: pw.BoxDecoration(
                    border: pw.Border.all(color: PdfColors.grey400),
                    borderRadius: pw.BorderRadius.circular(8),
                  ),
                  child: pw.Column(
                    children: [
                      pw.Text(
                        '[Camera Icon]', // Use text instead of icon
                        style: pw.TextStyle(
                          fontSize: 14,
                          color: PdfColors.grey600,
                        ),
                      ),
                      pw.SizedBox(height: 10),
                      pw.Text(
                        'Image not available for display',
                        style: pw.TextStyle(
                          fontSize: 14,
                          color: PdfColors.grey600,
                        ),
                      ),
                    ],
                  ),
                ),
                pw.SizedBox(height: 30),
              ],

              // Assessment summary
              pw.Container(
                padding: const pw.EdgeInsets.all(16),
                decoration: pw.BoxDecoration(
                  border: pw.Border.all(color: PdfColors.grey300),
                  borderRadius: const pw.BorderRadius.all(
                    pw.Radius.circular(8),
                  ),
                ),
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text(
                      'Assessment Summary',
                      style: pw.TextStyle(
                        fontSize: 18,
                        fontWeight: pw.FontWeight.bold,
                      ),
                    ),
                    pw.SizedBox(height: 15),

                    pw.Row(
                      children: [
                        pw.Expanded(
                          child: pw.Column(
                            crossAxisAlignment: pw.CrossAxisAlignment.start,
                            children: [
                              pw.Text(
                                'Overall Severity',
                                style: pw.TextStyle(
                                  fontWeight: pw.FontWeight.bold,
                                  fontSize: 14,
                                ),
                              ),
                              pw.SizedBox(height: 5),
                              pw.Text(
                                _capitalizeFirst(overallSeverity),
                                style: const pw.TextStyle(fontSize: 12),
                              ),
                            ],
                          ),
                        ),
                        pw.Expanded(
                          child: pw.Column(
                            crossAxisAlignment: pw.CrossAxisAlignment.start,
                            children: [
                              pw.Text(
                                'Estimated Cost',
                                style: pw.TextStyle(
                                  fontWeight: pw.FontWeight.bold,
                                  fontSize: 14,
                                ),
                              ),
                              pw.SizedBox(height: 5),
                              pw.Text(
                                formattedCost,
                                style: const pw.TextStyle(fontSize: 12),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),

              pw.SizedBox(height: 20),

              // Damages section
              if (damages.isNotEmpty) ...[
                pw.Text(
                  'Detected Damages',
                  style: pw.TextStyle(
                    fontSize: 18,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
                pw.SizedBox(height: 10),

                ...damages.map((damage) {
                  String damageType = 'Unknown';
                  String severity = '';

                  if (damage is Map<String, dynamic>) {
                    damageType =
                        damage['type']?.toString() ??
                        damage['damage_type']?.toString() ??
                        'Unknown';
                    severity = damage['severity']?.toString() ?? '';
                  } else if (damage is String) {
                    damageType = damage;
                  }

                  return pw.Container(
                    margin: const pw.EdgeInsets.only(bottom: 8),
                    padding: const pw.EdgeInsets.all(12),
                    decoration: pw.BoxDecoration(
                      color: PdfColors.grey100,
                      borderRadius: const pw.BorderRadius.all(
                        pw.Radius.circular(6),
                      ),
                    ),
                    child: pw.Row(
                      children: [
                        pw.Text(
                          '* ',
                          style: const pw.TextStyle(fontSize: 16),
                        ), // Use asterisk instead of bullet
                        pw.Expanded(
                          child: pw.Text(
                            _capitalizeFirst(damageType),
                            style: const pw.TextStyle(fontSize: 12),
                          ),
                        ),
                        if (severity.isNotEmpty)
                          pw.Container(
                            padding: const pw.EdgeInsets.symmetric(
                              horizontal: 8,
                              vertical: 2,
                            ),
                            decoration: pw.BoxDecoration(
                              color: PdfColors.grey300,
                              borderRadius: const pw.BorderRadius.all(
                                pw.Radius.circular(4),
                              ),
                            ),
                            child: pw.Text(
                              _capitalizeFirst(severity),
                              style: const pw.TextStyle(fontSize: 10),
                            ),
                          ),
                      ],
                    ),
                  );
                }).toList(),
              ],

              pw.SizedBox(height: 30),

              // Footer
              pw.Container(
                alignment: pw.Alignment.center,
                child: pw.Text(
                  'This report was generated automatically by InsureVis AI system.',
                  style: const pw.TextStyle(
                    fontSize: 10,
                    color: PdfColors.grey600,
                  ),
                ),
              ),
            ];
          },
        ),
      );

      return await _savePDF(
        pdf,
        'damage_assessment_${DateTime.now().toString().split(' ')[0]}.pdf',
      );
    } catch (e) {
      print('Error generating PDF: $e');
      print('Stack trace: ${StackTrace.current}');
      return null;
    }
  }

  static Future<String?> generateMultipleResultsPDF({
    required List<String> imagePaths,
    required Map<String, Map<String, dynamic>> apiResponses,
  }) async {
    try {
      final pdf = pw.Document();

      pdf.addPage(
        pw.MultiPage(
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(32),
          build: (pw.Context context) {
            return [
              // Header
              pw.Header(
                level: 0,
                child: pw.Text(
                  'Multi-Image Damage Assessment Report',
                  style: pw.TextStyle(
                    fontSize: 24,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
              ),

              pw.SizedBox(height: 20),

              // Report details
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Text(
                    'Report Date: ${DateTime.now().toString().split(' ')[0]}',
                    style: const pw.TextStyle(fontSize: 12),
                  ),
                  pw.Text(
                    'Generated by InsureVis',
                    style: const pw.TextStyle(fontSize: 12),
                  ),
                ],
              ),

              pw.SizedBox(height: 30),

              // Summary section
              pw.Container(
                padding: const pw.EdgeInsets.all(16),
                decoration: pw.BoxDecoration(
                  border: pw.Border.all(color: PdfColors.grey300),
                  borderRadius: const pw.BorderRadius.all(
                    pw.Radius.circular(8),
                  ),
                ),
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text(
                      'Assessment Overview',
                      style: pw.TextStyle(
                        fontSize: 18,
                        fontWeight: pw.FontWeight.bold,
                      ),
                    ),
                    pw.SizedBox(height: 10),
                    pw.Text(
                      'Total Images Analyzed: ${imagePaths.length}',
                      style: const pw.TextStyle(fontSize: 14),
                    ),
                    pw.Text(
                      'Successful Analyses: ${apiResponses.length}',
                      style: const pw.TextStyle(fontSize: 14),
                    ),
                  ],
                ),
              ),

              pw.SizedBox(height: 30),

              // Individual results
              ...imagePaths.asMap().entries.map((entry) {
                final index = entry.key;
                final imagePath = entry.value;
                final apiResponse = apiResponses[imagePath];

                if (apiResponse == null) {
                  return pw.Container(
                    margin: const pw.EdgeInsets.only(bottom: 20),
                    padding: const pw.EdgeInsets.all(16),
                    decoration: pw.BoxDecoration(
                      border: pw.Border.all(color: PdfColors.red300),
                      borderRadius: const pw.BorderRadius.all(
                        pw.Radius.circular(8),
                      ),
                    ),
                    child: pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text(
                          'Image ${index + 1} - Analysis Failed',
                          style: pw.TextStyle(
                            fontSize: 16,
                            fontWeight: pw.FontWeight.bold,
                            color: PdfColors.red700,
                          ),
                        ),
                        pw.SizedBox(height: 5),
                        pw.Text(
                          'This image could not be processed.',
                          style: const pw.TextStyle(fontSize: 12),
                        ),
                      ],
                    ),
                  );
                }

                return _buildIndividualResult(
                  index + 1,
                  imagePath,
                  apiResponse,
                );
              }),

              pw.SizedBox(height: 30),

              // Footer
              pw.Container(
                alignment: pw.Alignment.center,
                child: pw.Text(
                  'This report was generated automatically by InsureVis AI system.',
                  style: const pw.TextStyle(
                    fontSize: 10,
                    color: PdfColors.grey600,
                  ),
                ),
              ),
            ];
          },
        ),
      );

      return await _savePDF(
        pdf,
        'multi_damage_assessment_${DateTime.now().toString().split(' ')[0]}.pdf',
      );
    } catch (e) {
      print('Error generating multi-results PDF: $e');
      print('Stack trace: ${StackTrace.current}');
      return null;
    }
  }

  static pw.Widget _buildIndividualResult(
    int imageNumber,
    String imagePath,
    Map<String, dynamic> apiResponse,
  ) {
    final overallSeverity =
        apiResponse['overall_severity']?.toString() ?? 'Unknown';
    final totalCost = apiResponse['total_cost']?.toString() ?? 'Not available';
    final damages = apiResponse['damages'] ?? apiResponse['prediction'] ?? [];

    String formattedCost = 'Not available';
    if (totalCost != 'Not available') {
      try {
        final cost = double.parse(totalCost);
        formattedCost = 'â‚±${cost.toStringAsFixed(2)}';
      } catch (e) {
        formattedCost = 'â‚±$totalCost';
      }
    }

    return pw.Container(
      margin: const pw.EdgeInsets.only(bottom: 30),
      padding: const pw.EdgeInsets.all(16),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey300),
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Image $imageNumber Analysis',
            style: pw.TextStyle(fontSize: 16, fontWeight: pw.FontWeight.bold),
          ),

          pw.SizedBox(height: 15),

          // Summary row
          pw.Row(
            children: [
              pw.Expanded(
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text(
                      'Severity: ${_capitalizeFirst(overallSeverity)}',
                      style: const pw.TextStyle(fontSize: 12),
                    ),
                    pw.SizedBox(height: 5),
                    pw.Text(
                      'Cost: $formattedCost',
                      style: const pw.TextStyle(fontSize: 12),
                    ),
                  ],
                ),
              ),
              pw.Text(
                'Damages: ${damages.length}',
                style: const pw.TextStyle(fontSize: 12),
              ),
            ],
          ),

          if (damages.isNotEmpty) ...[
            pw.SizedBox(height: 10),
            pw.Text(
              'Detected Damages:',
              style: pw.TextStyle(fontSize: 12, fontWeight: pw.FontWeight.bold),
            ),
            pw.SizedBox(height: 5),
            ...damages.take(3).map((damage) {
              String damageType = 'Unknown';
              if (damage is Map<String, dynamic>) {
                damageType =
                    damage['type']?.toString() ??
                    damage['damage_type']?.toString() ??
                    'Unknown';
              } else if (damage is String) {
                damageType = damage;
              }

              return pw.Text(
                '* ${_capitalizeFirst(damageType)}', // Use asterisk instead of bullet
                style: const pw.TextStyle(fontSize: 10),
              );
            }).toList(),
            if (damages.length > 3)
              pw.Text(
                '* + ${damages.length - 3} more damages', // Use asterisk instead of bullet
                style: pw.TextStyle(
                  fontSize: 10,
                  fontStyle: pw.FontStyle.italic,
                ),
              ),
          ],
        ],
      ),
    );
  }

  static Future<String?> _savePDF(pw.Document pdf, String fileName) async {
    try {
      // Generate PDF bytes
      final pdfBytes = await pdf.save();

      // Try to save using local storage service first
      final savedPath = await LocalStorageService.saveFileToDocuments(
        pdfBytes,
        fileName,
      );

      if (savedPath != null) {
        return savedPath;
      }

      // Fallback to manual directory creation if local storage service fails
      Directory directory;

      // For mobile devices, handle permissions
      if (Platform.isAndroid || Platform.isIOS) {
        bool hasPermission = false;

        try {
          if (Platform.isAndroid) {
            // For Android 13+, we need storage permissions
            var status = await Permission.storage.request();
            hasPermission = status.isGranted;

            // For Android 11+ (API 30+), try manage external storage
            if (!hasPermission) {
              status = await Permission.manageExternalStorage.request();
              hasPermission = status.isGranted;
            }

            // Also request media permissions for modern Android
            if (!hasPermission) {
              final mediaStatus = await Permission.photos.request();
              hasPermission = mediaStatus.isGranted;
            }
          } else if (Platform.isIOS) {
            // For iOS, request photo library permissions
            var status = await Permission.photos.request();
            hasPermission = status.isGranted;
          }
        } catch (e) {
          print('Permission handling error: $e');
          hasPermission = false;
        }

        if (!hasPermission) {
          print('Storage permissions not granted');
          // Continue with fallback to app directory
        }
      }

      // Create InsureVis/documents directory in phone storage
      try {
        if (Platform.isAndroid) {
          // Try to get external storage directory first
          Directory? externalDir;
          try {
            externalDir = await getExternalStorageDirectory();
          } catch (e) {
            print('Could not get external storage: $e');
          }

          if (externalDir != null) {
            // Create InsureVis/documents in external storage
            directory = Directory(
              '${externalDir.path}/../../InsureVis/documents',
            );
          } else {
            // Fallback to app documents directory
            final appDir = await getApplicationDocumentsDirectory();
            directory = Directory('${appDir.path}/InsureVis/documents');
          }
        } else if (Platform.isIOS) {
          // For iOS, use app documents directory
          final appDir = await getApplicationDocumentsDirectory();
          directory = Directory('${appDir.path}/InsureVis/documents');
        } else {
          // For desktop platforms, use current directory
          final currentDir = Directory.current;
          directory = Directory('${currentDir.path}/generated_pdfs');
        }

        // Ensure directory exists
        if (!await directory.exists()) {
          await directory.create(recursive: true);
          print('Created InsureVis/documents directory: ${directory.path}');
        }

        print('Using InsureVis/documents directory: ${directory.path}');
      } catch (e) {
        print('Could not create InsureVis/documents directory: $e');

        // Fallback to app documents directory
        try {
          final appDir = await getApplicationDocumentsDirectory();
          directory = Directory('${appDir.path}/PDFs');
          if (!await directory.exists()) {
            await directory.create(recursive: true);
          }
          print('Using fallback app directory: ${directory.path}');
        } catch (fallbackError) {
          print('Fallback directory creation failed: $fallbackError');
          // Last resort: temp directory
          directory = Directory.systemTemp.createTempSync('pdf_fallback_');
          print('Using temporary directory as last resort: ${directory.path}');
        }
      }

      // Generate unique filename if file already exists
      String finalFileName = fileName;
      int counter = 1;
      while (await File('${directory.path}/$finalFileName').exists()) {
        final nameWithoutExtension = fileName.replaceAll('.pdf', '');
        finalFileName = '${nameWithoutExtension}_$counter.pdf';
        counter++;
      }

      final file = File('${directory.path}/$finalFileName');

      // Write file with error handling
      await file.writeAsBytes(pdfBytes);

      // Verify file was written successfully
      if (await file.exists() && await file.length() > 0) {
        print('PDF saved successfully to: ${file.path}');
        print('PDF size: ${pdfBytes.length} bytes');
        return file.path;
      } else {
        throw Exception('File was not written successfully');
      }
    } catch (e) {
      print('Error saving PDF: $e');
      print('Stack trace: ${StackTrace.current}');

      // Last resort: try system temp directory
      try {
        print('Attempting fallback save to system temp...');
        final tempDir = Directory.systemTemp.createTempSync('pdf_fallback_');
        final fallbackFile = File('${tempDir.path}/$fileName');
        await fallbackFile.writeAsBytes(await pdf.save());

        if (await fallbackFile.exists()) {
          print('Fallback save successful: ${fallbackFile.path}');
          return fallbackFile.path;
        }
      } catch (fallbackError) {
        print('Fallback save also failed: $fallbackError');
      }

      return null;
    }
  }

  static String _capitalizeFirst(String text) {
    if (text.isEmpty) return text;
    return text[0].toUpperCase() + text.substring(1).toLowerCase();
  }
}
